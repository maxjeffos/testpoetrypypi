version: 2.1

defaults: &defaults
  docker:
    - image: circleci/python:3.7
  working_directory: ~/repo

commands:
  install_deps:
    description: Install and cache dependencies
    steps:
      - restore_cache:
          keys:
            - v1-py-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Install
          command: poetry install -v
      - save_cache:
          key: v1-py-cache-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs

jobs:
  build:
    <<: *defaults
    steps:
      - run:
          name: Check environment
          command: |
            python --version
            pip --version
      - checkout
      - install_deps
      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - install_deps
      - run:
          name: Test
          command: poetry run pytest

  test_deps:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - install_deps
      - run:
          name: Test dependencies for security issues
          command: |
            # export requirements.txt from pyproject.toml into temp location
            mkdir dependencies-check
            poetry export -f requirements.txt --without-hashes > dependencies-check/requirements.txt
            cd dependencies-check

            # test dependencies with Snyk
            latest_version=$(curl -Is "https://github.com/snyk/snyk/releases/latest" | grep "Location" | sed s#.*tag/##g | tr -d "\r")
            snyk_cli_dl_linux="https://github.com/snyk/snyk/releases/download/${latest_version}/snyk-linux"
            curl -Lo ./snyk $snyk_cli_dl_linux
            chmod +x ./snyk
            pip install -r requirements.txt
            ./snyk test --file=requirements.txt

  release:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: temp - make sure that the requirements.txt isn't persisted to the workspace
          command: |
            ls -la

      # this is so that I don't have to do a `checkout` to be able to push the git tag
      - run:
          name: Add github.com to known_hosts
          command: |
            mkdir ~/.ssh
            ssh-keyscan github.com > ~/.ssh/known_hosts

      - install_deps
      - add_ssh_keys
      - run:
          name: Release
          command: |
            # these seem to be required (by semantic-release) even when using version_source="tag"
            git config --global user.email "${GH_USER_EMAIL}"
            git config --global user.name "${GH_USER}"

            # note running this command alone seems to produce the tag (but we still need to push it)
            # poetry run semantic-release version -Dversion_source=${SEM_REL_VERSION_SOURCE} -Dversion_variable=${SEM_REL_VERSION_VARIABLE}
            poetry run semantic-release version

            echo "python show version after semantic-release version command:"
            python semantic_release/__init__.py
            new_version=$(python semantic_release/__init__.py)
            
            if [[ $new_version == '0.0.0' ]]; then
                echo "new_version is default value"
                exit 0  # exit (without failing) so as to not publish
            fi

            echo "version in pyproject.toml before updating:"
            poetry version  #show version

            # update pypoetry.toml with the $new_version from semantic-release
            poetry version $new_version

            echo "version in pyproject.toml after updating:"
            poetry version  #show version

            # build the package for release
            poetry build
            
            echo "git push the new tag:"
            git push origin v${new_version}

            # Publish package to PyPI
            poetry publish --username __token__ --password $PYPI_TOKEN

workflows:
  version: 2
  build_test_release:
    jobs:
      - build
      - test:
          requires:
            - build
      - test_deps:
          requires:
            - build
      - release:
          context: testpoetrypypi-pypi
          requires:
            - build
            - test
          filters:
            branches:
              only: master
